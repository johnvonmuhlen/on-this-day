{"ast":null,"code":"var _jsxFileName = \"/home/johnvonmuhlen/projects/fishCollection/src/components/Data.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar objToday = new Date(),\n    domEnder = function () {\n  var a = objToday;\n  if (/1/.test(parseInt((a + \"\").charAt(0)))) return \"th\";\n  a = parseInt((a + \"\").charAt(1));\n  return 1 == a ? \"st\" : 2 == a ? \"nd\" : 3 == a ? \"rd\" : \"th\";\n}(),\n    dayOfMonth = today + (objToday.getDate() < 10) ? \"0\" + objToday.getDate() + domEnder : objToday.getDate() + domEnder,\n    months = new Array(\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"),\n    curMonth = months[objToday.getMonth()];\n\nvar today = `${curMonth} ${dayOfMonth}`;\n\nconst Data = () => {\n  _s();\n\n  const [event, setEvent] = useState(\"\");\n  /*useEffect(() => {\n    fetch(\"https://api.api-ninjas.com/v1/historicalevents?text=roman+empire\", {\n      method: \"GET\",\n      headers: { \"X-Api-Key\": \"Fc5jLn8ODsaHw0Sn/a9pMQ==TvVWzRhLKy5EAehX\" },\n      contentType: \"application/json\",\n    })\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          setEvent(result[1].year);\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          console.log(error);\n        }\n      );\n  }, []);*/\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dataWrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: event\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Data, \"rsMEMlx7RRe9tyd3dlynIZT3wKw=\");\n\n_c = Data;\nexport default Data;\n\nvar _c;\n\n$RefreshReg$(_c, \"Data\");","map":{"version":3,"names":["React","useEffect","useState","objToday","Date","domEnder","a","test","parseInt","charAt","dayOfMonth","today","getDate","months","Array","curMonth","getMonth","Data","event","setEvent"],"sources":["/home/johnvonmuhlen/projects/fishCollection/src/components/Data.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nvar objToday = new Date(),\n  domEnder = (function () {\n    var a = objToday;\n    if (/1/.test(parseInt((a + \"\").charAt(0)))) return \"th\";\n    a = parseInt((a + \"\").charAt(1));\n    return 1 == a ? \"st\" : 2 == a ? \"nd\" : 3 == a ? \"rd\" : \"th\";\n  })(),\n  dayOfMonth =\n    today + (objToday.getDate() < 10)\n      ? \"0\" + objToday.getDate() + domEnder\n      : objToday.getDate() + domEnder,\n  months = new Array(\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\"\n  ),\n  curMonth = months[objToday.getMonth()];\n\nvar today = `${curMonth} ${dayOfMonth}`;\n\nconst Data = () => {\n  const [event, setEvent] = useState(\"\");\n\n  /*useEffect(() => {\n    fetch(\"https://api.api-ninjas.com/v1/historicalevents?text=roman+empire\", {\n      method: \"GET\",\n      headers: { \"X-Api-Key\": \"Fc5jLn8ODsaHw0Sn/a9pMQ==TvVWzRhLKy5EAehX\" },\n      contentType: \"application/json\",\n    })\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          setEvent(result[1].year);\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          console.log(error);\n        }\n      );\n  }, []);*/\n  return (\n    <div className=\"dataWrapper\">\n      <h1>{event}</h1>\n    </div>\n  );\n};\n\nexport default Data;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;AAEA,IAAIC,QAAQ,GAAG,IAAIC,IAAJ,EAAf;AAAA,IACEC,QAAQ,GAAI,YAAY;EACtB,IAAIC,CAAC,GAAGH,QAAR;EACA,IAAI,IAAII,IAAJ,CAASC,QAAQ,CAAC,CAACF,CAAC,GAAG,EAAL,EAASG,MAAT,CAAgB,CAAhB,CAAD,CAAjB,CAAJ,EAA4C,OAAO,IAAP;EAC5CH,CAAC,GAAGE,QAAQ,CAAC,CAACF,CAAC,GAAG,EAAL,EAASG,MAAT,CAAgB,CAAhB,CAAD,CAAZ;EACA,OAAO,KAAKH,CAAL,GAAS,IAAT,GAAgB,KAAKA,CAAL,GAAS,IAAT,GAAgB,KAAKA,CAAL,GAAS,IAAT,GAAgB,IAAvD;AACD,CALU,EADb;AAAA,IAOEI,UAAU,GACRC,KAAK,IAAIR,QAAQ,CAACS,OAAT,KAAqB,EAAzB,CAAL,GACI,MAAMT,QAAQ,CAACS,OAAT,EAAN,GAA2BP,QAD/B,GAEIF,QAAQ,CAACS,OAAT,KAAqBP,QAV7B;AAAA,IAWEQ,MAAM,GAAG,IAAIC,KAAJ,CACP,SADO,EAEP,UAFO,EAGP,OAHO,EAIP,OAJO,EAKP,KALO,EAMP,MANO,EAOP,MAPO,EAQP,QARO,EASP,WATO,EAUP,SAVO,EAWP,UAXO,EAYP,UAZO,CAXX;AAAA,IAyBEC,QAAQ,GAAGF,MAAM,CAACV,QAAQ,CAACa,QAAT,EAAD,CAzBnB;;AA2BA,IAAIL,KAAK,GAAI,GAAEI,QAAS,IAAGL,UAAW,EAAtC;;AAEA,MAAMO,IAAI,GAAG,MAAM;EAAA;;EACjB,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBjB,QAAQ,CAAC,EAAD,CAAlC;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,oBACE;IAAK,SAAS,EAAC,aAAf;IAAA,uBACE;MAAA,UAAKgB;IAAL;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CA3BD;;GAAMD,I;;KAAAA,I;AA6BN,eAAeA,IAAf"},"metadata":{},"sourceType":"module"}